
Kubernetes Architecture:
Kubernets is basically oscestration tool. Every node knows what to do Kubernets just manges each node.
It includes 
1) kubectl cli, 
2) Master nodes 
3) Worker nodes.
Master node has 4 components 
 - etcd (kind of database store config that are mentioned in yaml file if not exist)
 - api server (every communication is done through API server component it communicate with all other components of master node and kubelet of worker node)
 - controller manager (it matches the current state with desired state of cluster runs in loop)
 - scheduler (schedules that which task run on which node it can be overridden)
Worker node has 3 components
 - kubelet (responsible for checking node health and communicating with api server of master node)
 - docker (container runtime) It is basically used for running containers inside pod.
 - kubelet proxy (for managing the networking related infomation of node)

Command used for setting up kubernets cluster and running yaml files.
minikube start // --driver (hyper v, vmware) if you want to specify by default it will pick hyper-v

kubetcl apply -f command creates a pod and run any particular image.

Different controllers : 
- Replicaset runs multiple replica of your application.
- Deployment runs multiple replicas of your application and make sure if one is down replace it with other. It also handle rolling update mechanism.
- Deamonset makes sure only one replica should be running on one node.
- Statefullset is used for application where data persistentcy is required same as deployment just data persistentcy is added here.


Lab # 1

running counter using single counter yaml file 
executed with kubectl apply -f simgle-counter.yaml

Result:

NAME      READY   STATUS    RESTARTS   AGE
counter   1/1     Running   0          15s

Logs: using kubectl logs counter

1: Fri Nov 18 10:48:24 UTC 2022: Kubernetes single container in 1 Pod
2: Fri Nov 18 10:48:29 UTC 2022: Kubernetes single container in 1 Pod
3: Fri Nov 18 10:48:34 UTC 2022: Kubernetes single container in 1 Pod
4: Fri Nov 18 10:48:39 UTC 2022: Kubernetes single container in 1 Pod
5: Fri Nov 18 10:48:44 UTC 2022: Kubernetes single container in 1 Pod


Lab # 2

running multi container yaml file 
execute with kubectl apply -f multi-container.yaml

NAME            READY   STATUS    RESTARTS   AGE
counter-multi   3/3     Running   0          84s

Lab # 3

running replica set 
executed with replica:4 using replicaset.yaml file

kubectl get replicaset,pods
NAME                      DESIRED   CURRENT   READY   AGE
replicaset.apps/counter   4         4         4       66s

NAME                READY   STATUS    RESTARTS   AGE
pod/counter-2ltq5   1/1     Running   0          38s
pod/counter-5mbgv   1/1     Running   0          38s
pod/counter-h9hzl   1/1     Running   0          66s
pod/counter-k8kvs   1/1     Running   0          38s

changed replica:3 and execute again kubectl apply -f replicaset.yaml

then kubectl get pods

NAME            READY   STATUS        RESTARTS   AGE
counter-2ltq5   1/1     Terminating   0          3m11s
counter-5mbgv   1/1     Running       0          3m11s
counter-h9hzl   1/1     Running       0          3m39s
counter-k8kvs   1/1     Running       0          3m11s

after few seconds pod is deleted
kubectl get pods
NAME            READY   STATUS    RESTARTS   AGE
counter-5mbgv   1/1     Running   0          4m7s
counter-h9hzl   1/1     Running   0          4m35s
counter-k8kvs   1/1     Running   0          4m7s

kubectl delete replicaset counter

Lab # 4

running deployment 
executed with replica:1 using replicaset.yaml file

then updated kubectl scale deployment counter --replicas=3

kubectl get deployment,replicaset,pods
NAME                      READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/counter   3/3     3            3           17m

NAME                                DESIRED   CURRENT   READY   AGE
replicaset.apps/counter-5776ddbc7   3         3         3       17m

NAME                          READY   STATUS    RESTARTS   AGE
pod/counter-5776ddbc7-cgxt6   1/1     Running   0          16m
pod/counter-5776ddbc7-gf585   1/1     Running   0          16m
pod/counter-5776ddbc7-zvsbz   1/1     Running   0          17m

Rolling update by updating image of pod

kubectl set image deployment/counter counter=busybox:1      
deployment.apps/counter image updated

PS F:\Ahsan Data\DevOps Lecture Videos\Lecture 6\k8s-labs\module-1> kubectl get po 

NAME                      READY   STATUS        RESTARTS   AGE
counter-5776ddbc7-cgxt6   1/1     Terminating   0          19m
counter-5776ddbc7-gf585   1/1     Terminating   0          19m
counter-5776ddbc7-zvsbz   1/1     Terminating   0          20m
counter-dd6bfbf8-fc87p    1/1     Running       0          34s
counter-dd6bfbf8-fvmsq    1/1     Running       0          34s
counter-dd6bfbf8-lg6v8    1/1     Running       0          21s
counter-dd6bfbf8-pg6s4    1/1     Running       0          28s

PS F:\Ahsan Data\DevOps Lecture Videos\Lecture 6\k8s-labs\module-1> kubectl get po
NAME                     READY   STATUS    RESTARTS   AGE
counter-dd6bfbf8-fc87p   1/1     Running   0          93s
counter-dd6bfbf8-fvmsq   1/1     Running   0          93s
counter-dd6bfbf8-lg6v8   1/1     Running   0          80s
counter-dd6bfbf8-pg6s4   1/1     Running   0          87s

Lab # 5

Deployment rolling update

kubectl apply -f deployment-rolling-update.yaml
deployment.apps/counter created
PS F:\Ahsan Data\DevOps Lecture Videos\Lecture 6\k8s-labs\module-1> kubectl get po
NAME                       READY   STATUS    RESTARTS   AGE
counter-7d89877cfd-vwztg   1/1     Running   0          50s

PS F:\Ahsan Data\DevOps Lecture Videos\Lecture 6\k8s-labs\module-1> kubectl set image deployment/counter counter=busybox:22     
deployment.apps/counter image updated

PS F:\Ahsan Data\DevOps Lecture Videos\Lecture 6\k8s-labs\module-1> kubectl get po                                              
counter-766cf587d8-sdln8   0/1     ContainerCreating   0          13s
counter-7d89877cfd-vwztg   1/1     Running             0          2m12s

PS F:\Ahsan Data\DevOps Lecture Videos\Lecture 6\k8s-labs\module-1> kubectl get po
counter-766cf587d8-sdln8   0/1     ErrImagePull   0          19s
counter-7d89877cfd-vwztg   1/1     Running        0          2m18s

kubectl get po
NAME                       READY   STATUS             RESTARTS   AGE
counter-766cf587d8-sdln8   0/1     ImagePullBackOff   0          48s
counter-7d89877cfd-vwztg   1/1     Running            0          2m47s

PS F:\Ahsan Data\DevOps Lecture Videos\Lecture 6\k8s-labs\module-1> kubectl rollout undo deployment counter 
deployment.apps/counter rolled back

PS F:\Ahsan Data\DevOps Lecture Videos\Lecture 6\k8s-labs\module-1> kubectl get po
NAME                       READY   STATUS    RESTARTS   AGE
counter-7d89877cfd-vwztg   1/1     Running   0          3m26s


Lab # 6

running goland service lab

kubectl apply -f golang-api.yaml
deployment.apps/golang-deployment created
PS F:\Ahsan Data\DevOps Lecture Videos\Lecture 6\k8s-labs\module-1> kubectl apply -f golang-svc.yaml
service/golang-api created

minikube ip = 172.30:40:181

PS F:\Ahsan Data\DevOps Lecture Videos\Lecture 6\k8s-labs\module-1> kubectl get po
NAME                                 READY   STATUS    RESTARTS   AGE
golang-deployment-69467dc947-25zpg   1/1     Running   0          3m13s
golang-deployment-69467dc947-d76bc   1/1     Running   0          3m13s
golang-deployment-69467dc947-jrmsh   1/1     Running   0          3m13s

172.30:40:181:32000/hello
Hello, you've requested: /hello

Lab # 7

running frontend and backend yaml files

kubectl apply -f frontend.yaml   
deployment.apps/node-frontend created
service/frontend created
PS F:\Ahsan Data\DevOps Lecture Videos\Lecture 6\k8s-labs\module-1> kubectl get po
NAME                             READY   STATUS    RESTARTS   AGE
node-frontend-5ff55b964f-4g9nd   1/1     Running   0          2m43s
node-frontend-5ff55b964f-8vssx   1/1     Running   0          2m43s
python-backend-8454859fc-jbmrt   1/1     Running   0          2m53s
python-backend-8454859fc-s7fpf   1/1     Running   0          2m53s

